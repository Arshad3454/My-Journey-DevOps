DevOps

1 :What is DevOps
Ans: DevOps is the process of improving the Application Delivery, By ensuring that there is a proper automation with code quality and ensuring continuous monitoring and continuous testing.


Day 2:
SDLC -Software development life cycle
Planning -> Defining -> Designing -> Building -> Testing -> Deploy
 As a DevOps engineer ->Building -> Testing -> Deploy   


Day 3:
Hypervisor :A hypervisor is a software that you can use to run multiple virtual machines on a single physical machine
        (Break the Pysical server to logically many)

Day 4:
Git 
    -git init :create or initialize a repository
    -git status
    -git add <name>
    -git commit -m "message"
    -git push   :put this in to GitHub
        (git add && git commit -m "" & git push)

    -git log & -git log --oneline 
    -git remote -v :to check the remote reference
    -git rmote add "account & repo"
    -git clone ""  :pull the code from GitHub

    -git checkout  -switch to diffrent branch and create a branch
    -git branch = git check -b ->craeate the branch

    Git clone and Git Fork
        Clone: download repository
        Fork :Make copy of repository
    
    git log
    -git cherry-pick :git cherry-pick (logs-id) -its easy for small changes 
    
    -git merge 
    -git rebase
        git checkout feuture
        git merge main 
    Merge and rebase :randum merge cheayyanulla option aan .But 'rebase' aan nallath ,Enth kondannal rebase oru linear flow follow cheayyunnund.
    git merge ath update aakumbo 




Day 5:
Configuration Management
    :Puupet, Chef, Ansible ...
    
    -why Ansible better :
    Ansible: Push mechanism , Agentless ,good with windows & linux ,Yaml language
    Puppet : pull mechanism, master slave architecture( like need to go and update all server), puppet language
    
    Ansible draw back :Have some issue windows ,Not good with debugging ,performance 
    ? Does Ansible support windows and Linux.
    ans : Yes , Linux :ssh protocol , windows :win RM


Ansible installation
    -sudo apt install ansible

setting up passwordless authentication.
-created 2 servers  Ansible server &target_server
In first server
 -ssh keygen
    ls /home/ubunt/.ssh
    cat ......id_rsa.pub and copy the key and login to second server
Target server
    -Do ssh -keygen  here as well
    - ls ~/.ssh/ and open the autherized_keys and paste the content here.
    Go th first servwe: -ssh ipaddress off target_server

Inventory file in Ansible :Store target file ka private ip
    - vim inventory

    - ansible -i inventory <ip> -m "shell" -a touch "DevOps session"
Ansible adhoc commands
    - ansible -i inventory <ip> -m "shell" -a touch "DevOps session" 
-we can do grouping in servers in inventory file and also we can run certain niumber of servers(grouped servers).

Ansible play Book:whaen we want to run multiple task
    -Yaml format
    
    PlayBook example
    ---
    -   name: install and start nginx
        host: all
        become: root
    
        tasks:
            - name: install nginix
               apt:
                name: nginx             --> 
                state: present          ->shell: apt install nginx
        
            - name: start nginx
               service: 
                name: nginx             -->
                state: started          --> shell: systemctl start nginx

To run the Ansible PlayBook:- ansible-Playbook -i inventory (nameof PlayBook.yml)
                              ansible-Playbook --v -i inventory firstplaybook.yml
    
    Ansible Roles: Efficient way to write Ansible PlayBook
        #ansible-galaxy role init kubernetes -it will create a kubernets directory and inside bunch of files and folders will be there , eg(templates, handlers,file...)
            Using this we can structure ansible PlayBook


Day 6:
CICD :continuous integration continuous Delivery.
    Unit testing-> Static cide analysis-> Code analysis/vulunurablity-> Automation-> reports-> Deployment

    *Dev enviournment
    *stage enviournment -
    *production enviournment -Customr using application


Day 7:
Jenkins
-Install Java :sudo apt install openjdk-11-jre

-Install Jenkins :
    curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee \
        /usr/share/keyrings/jenkins-keyring.asc > /dev/null
    echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
        https://pkg.jenkins.io/debian binary/ | sudo tee \
        /etc/apt/sources.list.d/jenkins.list > /dev/null
    sudo apt-get update
    sudo apt-get install jenkins
    sudo apt-get update
    sudo apt-get install jenkins
Jenkins default port: 8080

Add Jenkins in docker Group : Sudo su ,usermod -aG docker jenkins


Day 8:
GitHub Actions :a continuous integration and continuous delivery (CI/CD) platform that allows you to automate your build, test, and deployment pipeline.
    -Any GitHub Actions workflows in your repository, you must save the workflow files in a directory called .github/workflows.
        inside that a github-action-demo.yml

        Synrax:

        name: Git Hub Action demo
        
        on:
            push
